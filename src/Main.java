import javafx.util.Pair;

import java.util.HashMap;
import java.util.Map;

    public class Main {
        private static final int GAP_PENALTY = 2;
        private static final int MISMATCH_PENALTY = 1;

        static Map<Pair<String, String>, Integer> cache;

        public static void main(String[] args) {
            String s1 = "BZFBZDBBFFDFBDFFBDBFBBBBDZFFZBFZBFFBDZFFBFBZZFFZBDDFDFBBFFZZFDDFDZZZBFZBFFFFBBFZZDZFDDDFBDFFZBZFFZDBBZBZDBZZFFDFZFFFDBFDZFDDDFZDFDFZFFZBZFFBZBBBFFDFFFFZFBBDFBDDZDFBBZDDFZFFZDBBFZFDFZBDBBDFDFDDBZZFBDDBFFDBFBBZZFBZFFDBFBZZFZDBFBZDZDZZDFFZBZBZDZFFDFDZZZDZFFZBBFDBDBZDBFDZFDDBFBBZFBBBZZFFZBZFFZFDDZBZZZDZFBBFBBFBBFZFBDFDBBFBBFBZFZFFBBBBDFZDFZDDBZBDDFDFBBBZDFFZFDFZFZFDFDFBZFBFDBZDFZFZFDZFDBZFZFBZDDDFDBBFBFZBZFDFBZZFBDZBZDBFFBBFFFBZDBBFBBZDDFFZBFFBDZZZDFFFDFZFDFFBZFDBFFDBBBBFZFDBDDZFBZDBDBZFZDBDBBDFBZBZFFDFBBBBBDBZDFZDBBBFDFFZZFBBDFZZFZFFFDZFBBBFZZFBDDBBDZFBZBZZZFDDFFBDZFFDBZDBBFZZBZZDFFZBZZFBDFFBBFBZFBBDFZFBBDZFFFZFZDZFDFZDFZDFBZBZDFFZFFZFFZBDBBZFFBZBZDFDDFZZZBZBDDFFZFFFFDBZZFDFDDBDBDZBBFFZBBZZDDZZBZFDZFFDBBZFZDFZFBDDBFZFBZBZDFDZZBDFDDZZZFFDBDFDDFDDBBFDFBDFDDFBBFDFBZZBBBFZZDFDDBDFFZZFZFDFDZFFFZZDDBZDFZZFFBBBBFBZFBFBFDFZFFBBFZFDDFBFDFZBFFZFFZDFZDDFDDBDFFBFZDZFDBBDFZDBFBDBDZFFDBFBFFZFBZDFBFDDFDFDZBZBDDFBFDZFDZDBBDDZFFZDBBDFBBFBFBZBZZFDBFZZFDBFFBBBBFDZZDFDDBBDBBFFFFZZBBBDBZDBDDZFFDFFDBFFDBZZFZBZZBBDDFFZFFDFDBFDFDBFBZDFBBFFZDZZFDBFDDZFZFDZDBFDFDFZFZZZDBZBDFDBBFZFDFZBZDFFDFDFDDFDZFBBDBZZBDDFFZZZBBDFFBZZBZFDZDBFFBFDDFZBZZBZZDFBDFFDFFZFFFBZZFDZZDBDZBZFFFBBBFBFZDBDBZDZZBBDFFZFBBFDZFBBFZBFBBBBBDFZFZZBDBFDBZDBFZZFFDZDFZFFBZDBBFDFBDZDBBZBFZZFFDZFDFBBBBFBFZZZZBB";
            String s2 = "FZFDFDDBFDDDFDDBZDFDFFDDFZDFBZDZFFFDFDFZDFBBFFZFBDFZFDZZDBZDBZFBBFFDZFBDFFDFZDDBDDFFFBZBBDDFDBDZDZFBDFBDDFDFFFZFZFFFDZBZFZFDBFZDFDFDFFDFZFDFDFFDFFDFDFBZDFZDBBZDZFFBDFBFFDDFDDDBFFDFBZDFDDDBFFDDFZFFBFDFDFDDFBFBDDFZFFDDFFDFZDBFDFZDDBFFFDFZDBFDFZDZFDBDDFDDFFDFFDDBFDZFFDDBFDDBDDFDFZFDBDBDDDBFFZDZDFDZFFFDFDDDFZDDFBZDFFDFBDFFDFBDDZFZDFDFDFDDBZDFDDZDFFDDDZFFDDDBFFZDDFDBZZDDFFFDDFDBBFDDFBZDDBDDZDDZFDDDBZDFDDZFFZDFFZDFBDFFZDBFDFDFFDBZDDFZFBZDDDDFDFDDBZFZZDFFDDFDFDDDZFFFFDZFFBFDZFDZFFZFFZDZDFFZDBBDFBFBBDBZDZZDDBDBDDDZFFDDDBDZFDFZFFBFDFDFDDDBDDZFZDFZZDFBFFFFBZZFZDFDZFDFDDDZZDFDDZDFFDDDZFFDFFDDDZFFBBFBFFBDFBFBZFFBZDZFFFDFDDFZDZFDBZDFBDBZFFFDFFDFFDZDFBDDZDFFZFFDFFZFZZDBBDBBZFFDFDFDZDZFDDBDFZDFBDBFDDZFFDDFZDFFDFFDFFZDBDFZFBDDDBFFBDBZDFDFDFDFFDDZFDBFBDDZDFFZDFZFFFDFDDFBFDFDBZDBBFBDDDZFDBZFFDBFDFDDBZDFDDZDFFDDBBDFBFFBZDFZFBFBZFBZDFBFFDFDDFDDFDFZFFDFBDFBZDDFFFDFDFFFZDDFFZFBZDFDZDDFDFDBFDZZFDZDBBFFFDBZDBZDDBFDDFDFDFZDFBBFBFBDDDZFFBBDZFDZFDFDFBFDFDDZFBBFFDDZDFFFDFDFDDFFZDFBFDDFFFDFDFFFDBZDFZFDZFBDDFFDFFDFDDBFDDBFDZFFDDFFZFZFDFDFBBFZFFDDFZFDFDFZDZZDFBDDFZDDDFZZDFDDZFFFZDFZDDFDFDDFFFZFDDFDBZDZFFDDFBDFDDFDFZDFFFDDDFFDDZZDZFDFDDFDDFDDFFDFZDDZFDBDDFZBDDFDDZZZFFDDDFDFDFBFFDFFZDZDFZDDBBFFDDDZFFDDFFDFFDFZFFDZDFDBBFDFZDDDBZDFBDDDDBBDFDDBFDDDFBZFFDDBBFFDFFDDFDDZFFDZFDFDFBDBBZDZDZBB";
            cache = new HashMap<>();
            System.out.println(findAMD(s1, s2));
        }

        private static int findAMD(String m1, String m2) {
            if (m1.isEmpty())
                return m2.length() * GAP_PENALTY;

            if (m2.isEmpty())
                return m1.length() * GAP_PENALTY;

            Integer cached = getFromCache(m1, m2);
            if (cached != null)
                return cached;

            int letterCost = m1.charAt(0) == m2.charAt(0) ? 0 : MISMATCH_PENALTY;


            int amd = Math.min(letterCost + findAMD(m1.substring(1), m2.substring(1)),
                    Math.min(GAP_PENALTY + findAMD(m1.substring(1), m2),
                            GAP_PENALTY + findAMD(m1, m2.substring(1))));

            cache.put(new Pair<>(m1, m2), amd);
            return amd;
        }

        private static Integer getFromCache(String s1, String s2) {
            return cache.get(new Pair<>(s1, s2));
        }
    }

