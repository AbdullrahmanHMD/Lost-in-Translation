import javafx.util.Pair;

import java.util.Arrays;

public class Main {
    private static final int GAP_PENALTY = 2;
    private static final int MISMATCH_PENALTY = 1;

    static int[][] cache;

    public static void main(String[] args) {
        String s1 = "BZFBZDBBFFDFBDFFBDBFBBBBDZFFZBFZBFFBDZFFBFBZZFFZBDDFDFBBFFZZFDDFDZZZBFZBFFFFBBFZZDZFDDDFBDFFZBZFFZDBBZBZDBZZFFDFZFFFDBFDZFDDDFZDFDFZFFZBZFFBZBBBFFDFFFFZFBBDFBDDZDFBBZDDFZFFZDBBFZFDFZBDBBDFDFDDBZZFBDDBFFDBFBBZZFBZFFDBFBZZFZDBFBZDZDZZDFFZBZBZDZFFDFDZZZDZFFZBBFDBDBZDBFDZFDDBFBBZFBBBZZFFZBZFFZFDDZBZZZDZFBBFBBFBBFZFBDFDBBFBBFBZFZFFBBBBDFZDFZDDBZBDDFDFBBBZDFFZFDFZFZFDFDFBZFBFDBZDFZFZFDZFDBZFZFBZDDDFDBBFBFZBZFDFBZZFBDZBZDBFFBBFFFBZDBBFBBZDDFFZBFFBDZZZDFFFDFZFDFFBZFDBFFDBBBBFZFDBDDZFBZDBDBZFZDBDBBDFBZBZFFDFBBBBBDBZDFZDBBBFDFFZZFBBDFZZFZFFFDZFBBBFZZFBDDBBDZFBZBZZZFDDFFBDZFFDBZDBBFZZBZZDFFZBZZFBDFFBBFBZFBBDFZFBBDZFFFZFZDZFDFZDFZDFBZBZDFFZFFZFFZBDBBZFFBZBZDFDDFZZZBZBDDFFZFFFFDBZZFDFDDBDBDZBBFFZBBZZDDZZBZFDZFFDBBZFZDFZFBDDBFZFBZBZDFDZZBDFDDZZZFFDBDFDDFDDBBFDFBDFDDFBBFDFBZZBBBFZZDFDDBDFFZZFZFDFDZFFFZZDDBZDFZZFFBBBBFBZFBFBFDFZFFBBFZFDDFBFDFZBFFZFFZDFZDDFDDBDFFBFZDZFDBBDFZDBFBDBDZFFDBFBFFZFBZDFBFDDFDFDZBZBDDFBFDZFDZDBBDDZFFZDBBDFBBFBFBZBZZFDBFZZFDBFFBBBBFDZZDFDDBBDBBFFFFZZBBBDBZDBDDZFFDFFDBFFDBZZFZBZZBBDDFFZFFDFDBFDFDBFBZDFBBFFZDZZFDBFDDZFZFDZDBFDFDFZFZZZDBZBDFDBBFZFDFZBZDFFDFDFDDFDZFBBDBZZBDDFFZZZBBDFFBZZBZFDZDBFFBFDDFZBZZBZZDFBDFFDFFZFFFBZZFDZZDBDZBZFFFBBBFBFZDBDBZDZZBBDFFZFBBFDZFBBFZBFBBBBBDFZFZZBDBFDBZDBFZZFFDZDFZFFBZDBBFDFBDZDBBZBFZZFFDZFDFBBBBFBFZZZZBB";
        String s2 = "FZFDFDDBFDDDFDDBZDFDFFDDFZDFBZDZFFFDFDFZDFBBFFZFBDFZFDZZDBZDBZFBBFFDZFBDFFDFZDDBDDFFFBZBBDDFDBDZDZFBDFBDDFDFFFZFZFFFDZBZFZFDBFZDFDFDFFDFZFDFDFFDFFDFDFBZDFZDBBZDZFFBDFBFFDDFDDDBFFDFBZDFDDDBFFDDFZFFBFDFDFDDFBFBDDFZFFDDFFDFZDBFDFZDDBFFFDFZDBFDFZDZFDBDDFDDFFDFFDDBFDZFFDDBFDDBDDFDFZFDBDBDDDBFFZDZDFDZFFFDFDDDFZDDFBZDFFDFBDFFDFBDDZFZDFDFDFDDBZDFDDZDFFDDDZFFDDDBFFZDDFDBZZDDFFFDDFDBBFDDFBZDDBDDZDDZFDDDBZDFDDZFFZDFFZDFBDFFZDBFDFDFFDBZDDFZFBZDDDDFDFDDBZFZZDFFDDFDFDDDZFFFFDZFFBFDZFDZFFZFFZDZDFFZDBBDFBFBBDBZDZZDDBDBDDDZFFDDDBDZFDFZFFBFDFDFDDDBDDZFZDFZZDFBFFFFBZZFZDFDZFDFDDDZZDFDDZDFFDDDZFFDFFDDDZFFBBFBFFBDFBFBZFFBZDZFFFDFDDFZDZFDBZDFBDBZFFFDFFDFFDZDFBDDZDFFZFFDFFZFZZDBBDBBZFFDFDFDZDZFDDBDFZDFBDBFDDZFFDDFZDFFDFFDFFZDBDFZFBDDDBFFBDBZDFDFDFDFFDDZFDBFBDDZDFFZDFZFFFDFDDFBFDFDBZDBBFBDDDZFDBZFFDBFDFDDBZDFDDZDFFDDBBDFBFFBZDFZFBFBZFBZDFBFFDFDDFDDFDFZFFDFBDFBZDDFFFDFDFFFZDDFFZFBZDFDZDDFDFDBFDZZFDZDBBFFFDBZDBZDDBFDDFDFDFZDFBBFBFBDDDZFFBBDZFDZFDFDFBFDFDDZFBBFFDDZDFFFDFDFDDFFZDFBFDDFFFDFDFFFDBZDFZFDZFBDDFFDFFDFDDBFDDBFDZFFDDFFZFZFDFDFBBFZFFDDFZFDFDFZDZZDFBDDFZDDDFZZDFDDZFFFZDFZDDFDFDDFFFZFDDFDBZDZFFDDFBDFDDFDFZDFFFDDDFFDDZZDZFDFDDFDDFDDFFDFZDDZFDBDDFZBDDFDDZZZFFDDDFDFDFBFFDFFZDZDFZDDBBFFDDDZFFDDFFDFFDFZFFDZDFDBBFDFZDDDBZDFBDDDDBBDFDDBFDDDFBZFFDDBBFFDFFDDFDDZFFDZFDFDFBDBBZDZDZBB";
        cache = new int[s1.length()][s2.length()];
        for (int[] a : cache)
            Arrays.fill(a, -1);
        System.out.println(findAMD(s1, s2));
    }

    private static int findAMD(String message1, String message2) {
        return findAMDAux(message1.toCharArray(), message2.toCharArray(), 0, 0);
    }

    static Triplet findAMDAux(char[] characters1, char[] characters2, int pointer1, int pointer2, Pair<String, String> solution) {
        if (pointer1 == characters1.length) // first message finished
            return new Triplet(new String(characters1), new String(characters2), (characters2.length - pointer2) * GAP_PENALTY); // return the rest of message2 length as gap penalties

        if (pointer2 == characters2.length) // second message finished
            return new Triplet(new String(characters1), new String(characters2), (characters1.length - pointer1) * GAP_PENALTY); // return the rest of message2 length as gap penalties

        int cached = getFromCache(characters1.length - pointer1, characters2.length - pointer2);
        if (cached != -1)
            return new Triplet(new String(characters1), new String(characters2), cached);

        int letterCost = characters1[pointer1] == characters2[pointer2] ? 0 : MISMATCH_PENALTY;
        String first = solution.getKey();
        String second = solution.getValue();

        Triplet noGap = letterCost + findAMDAux(characters1, characters2, pointer1 + 1, pointer2 + 1, new Pair<>(first + characters1[pointer1], second + characters2[pointer2]));
        Triplet gapInSecond = GAP_PENALTY + findAMDAux(characters1, characters2, pointer1 + 1, pointer2, new Pair<>(first + characters1[pointer1], second + "_"));
        Triplet gapInFirst = GAP_PENALTY + findAMDAux(characters1, characters2, pointer1, pointer2 + 1, new Pair<>(first + "_", second + characters2[pointer2]));

        Triplet amdSolution;

        if (noGap.getTotal() < gapInFirst.getTotal())
            if (noGap.getTotal() < gapInSecond.getTotal())
                amdSolution = new Triplet(noGap)

        int amd = Math.min(letterCost + findAMDAux(characters1, characters2, pointer1 + 1, pointer2 + 1).getTotal(), // no gaps
                Math.min(GAP_PENALTY + findAMDAux(characters1, characters2, pointer1 + 1, pointer2).getTotal(), // gap in message 2
                        GAP_PENALTY + findAMDAux(characters1, characters2, pointer1, pointer2 + 1).getTotal())); // gap in message 1

        cache[characters1.length - pointer1 - 1][characters2.length - pointer2 - 1] = amd; // cache the result
        return amd;
    }

    private static Integer getFromCache(int s1, int s2) {
        return cache[s1 - 1][s2 - 1];
    }
}